{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"toc_visible":true,"authorship_tag":"ABX9TyO8HvMn4BztBHZ91DW5NkBv"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"-HEvGwjv-ucE","executionInfo":{"status":"ok","timestamp":1711709181918,"user_tz":-180,"elapsed":1869,"user":{"displayName":"Kosam Omollo","userId":"10545480591997447540"}}},"outputs":[],"source":["import os\n","import pandas as pd\n","import datetime as dt\n","import matplotlib.pyplot as plt\n","from google.colab import files"]},{"cell_type":"code","source":["def upload_files(filename):\n","    \"\"\"\n","    Upload file to colab runtime\n","    \"\"\"\n","    print(f\"uploading....{filename}....\")\n","    files.upload()\n","\n","    if not os.path.isfile(filename):\n","        print(f\"{filename} does not exist. Please upload mannually...\")\n","        exit()\n"],"metadata":{"id":"P9rR-_cC_B69","executionInfo":{"status":"ok","timestamp":1711709182363,"user_tz":-180,"elapsed":25,"user":{"displayName":"Kosam Omollo","userId":"10545480591997447540"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["upload_files(\"ticker-fb.csv\")\n","fb = pd.read_csv(\"ticker-fb.csv\", index_col=0, parse_dates=True)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":91},"id":"gGY_sOQr_dTR","executionInfo":{"status":"ok","timestamp":1711709196160,"user_tz":-180,"elapsed":13819,"user":{"displayName":"Kosam Omollo","userId":"10545480591997447540"}},"outputId":"15e0374f-302d-43ff-c58f-a25fd0207da5"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["uploading....ticker-fb.csv....\n"]},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-4535b3f6-2ead-418e-8c8d-300af66fb0dc\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-4535b3f6-2ead-418e-8c8d-300af66fb0dc\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving ticker-fb.csv to ticker-fb.csv\n"]}]},{"cell_type":"code","source":["fb.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":238},"id":"V4Fo6_73_txV","executionInfo":{"status":"ok","timestamp":1711709196161,"user_tz":-180,"elapsed":76,"user":{"displayName":"Kosam Omollo","userId":"10545480591997447540"}},"outputId":"e71d5798-980e-438c-dbce-a7723907360a"},"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                  High         Low        Open       Close    Volume  \\\n","Date                                                                   \n","2018-01-02  181.580002  177.550003  177.679993  181.419998  18151900   \n","2018-01-03  184.779999  181.330002  181.880005  184.669998  16886600   \n","2018-01-04  186.210007  184.100006  184.899994  184.330002  13880900   \n","2018-01-05  186.899994  184.929993  185.589996  186.850006  13574500   \n","2018-01-08  188.899994  186.330002  187.199997  188.279999  17994700   \n","\n","             Adj Close  \n","Date                    \n","2018-01-02  181.419998  \n","2018-01-03  184.669998  \n","2018-01-04  184.330002  \n","2018-01-05  186.850006  \n","2018-01-08  188.279999  "],"text/html":["\n","  <div id=\"df-64efde60-0e16-4ceb-bdb9-513f4bfc0adb\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>High</th>\n","      <th>Low</th>\n","      <th>Open</th>\n","      <th>Close</th>\n","      <th>Volume</th>\n","      <th>Adj Close</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2018-01-02</th>\n","      <td>181.580002</td>\n","      <td>177.550003</td>\n","      <td>177.679993</td>\n","      <td>181.419998</td>\n","      <td>18151900</td>\n","      <td>181.419998</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-03</th>\n","      <td>184.779999</td>\n","      <td>181.330002</td>\n","      <td>181.880005</td>\n","      <td>184.669998</td>\n","      <td>16886600</td>\n","      <td>184.669998</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-04</th>\n","      <td>186.210007</td>\n","      <td>184.100006</td>\n","      <td>184.899994</td>\n","      <td>184.330002</td>\n","      <td>13880900</td>\n","      <td>184.330002</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-05</th>\n","      <td>186.899994</td>\n","      <td>184.929993</td>\n","      <td>185.589996</td>\n","      <td>186.850006</td>\n","      <td>13574500</td>\n","      <td>186.850006</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-08</th>\n","      <td>188.899994</td>\n","      <td>186.330002</td>\n","      <td>187.199997</td>\n","      <td>188.279999</td>\n","      <td>17994700</td>\n","      <td>188.279999</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-64efde60-0e16-4ceb-bdb9-513f4bfc0adb')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-64efde60-0e16-4ceb-bdb9-513f4bfc0adb button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-64efde60-0e16-4ceb-bdb9-513f4bfc0adb');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-b2f2cd36-6437-4de2-9680-fbd1e65cca0f\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b2f2cd36-6437-4de2-9680-fbd1e65cca0f')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-b2f2cd36-6437-4de2-9680-fbd1e65cca0f button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"fb","summary":"{\n  \"name\": \"fb\",\n  \"rows\": 756,\n  \"fields\": [\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2018-01-02 00:00:00\",\n        \"max\": \"2020-12-31 00:00:00\",\n        \"num_unique_values\": 756,\n        \"samples\": [\n          \"2019-08-16 00:00:00\",\n          \"2018-05-22 00:00:00\",\n          \"2019-09-10 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"High\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 38.96082858834079,\n        \"min\": 129.74000549316406,\n        \"max\": 304.6700134277344,\n        \"num_unique_values\": 717,\n        \"samples\": [\n          199.1000061035156,\n          183.4900054931641,\n          182.8800048828125\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Low\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 37.950350992599425,\n        \"min\": 123.0199966430664,\n        \"max\": 293.04998779296875,\n        \"num_unique_values\": 727,\n        \"samples\": [\n          212.6499938964844,\n          264.0,\n          200.9600067138672\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Open\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 38.484810689493955,\n        \"min\": 123.0999984741211,\n        \"max\": 300.1600036621094,\n        \"num_unique_values\": 720,\n        \"samples\": [\n          183.0800018310547,\n          172.89999389648438,\n          164.8000030517578\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Close\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 38.47702663484276,\n        \"min\": 124.05999755859376,\n        \"max\": 303.9100036621094,\n        \"num_unique_values\": 732,\n        \"samples\": [\n          220.63999938964844,\n          176.00999450683594,\n          165.44000244140625\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Volume\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14282024,\n        \"min\": 6046300,\n        \"max\": 169803700,\n        \"num_unique_values\": 755,\n        \"samples\": [\n          11097800,\n          13109200,\n          18783000\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Adj Close\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 38.47702663484276,\n        \"min\": 124.05999755859376,\n        \"max\": 303.9100036621094,\n        \"num_unique_values\": 732,\n        \"samples\": [\n          220.63999938964844,\n          176.00999450683594,\n          165.44000244140625\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["fb.shift()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":455},"id":"5DfrZHxc_6-l","executionInfo":{"status":"ok","timestamp":1711709196161,"user_tz":-180,"elapsed":67,"user":{"displayName":"Kosam Omollo","userId":"10545480591997447540"}},"outputId":"8fa46adf-e351-4edb-afe1-a0770a07de76"},"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                  High         Low        Open       Close      Volume  \\\n","Date                                                                     \n","2018-01-02         NaN         NaN         NaN         NaN         NaN   \n","2018-01-03  181.580002  177.550003  177.679993  181.419998  18151900.0   \n","2018-01-04  184.779999  181.330002  181.880005  184.669998  16886600.0   \n","2018-01-05  186.210007  184.100006  184.899994  184.330002  13880900.0   \n","2018-01-08  186.899994  184.929993  185.589996  186.850006  13574500.0   \n","...                ...         ...         ...         ...         ...   \n","2020-12-24  272.170013  266.230011  266.890015  268.109985  14329000.0   \n","2020-12-28  270.399994  266.200012  268.880005  267.399994   6702000.0   \n","2020-12-29  277.299988  265.660004  268.739990  277.000000  23299700.0   \n","2020-12-30  280.510010  276.279999  276.950012  276.779999  16383000.0   \n","2020-12-31  278.079987  271.709991  277.950012  271.869995  11803800.0   \n","\n","             Adj Close  \n","Date                    \n","2018-01-02         NaN  \n","2018-01-03  181.419998  \n","2018-01-04  184.669998  \n","2018-01-05  184.330002  \n","2018-01-08  186.850006  \n","...                ...  \n","2020-12-24  268.109985  \n","2020-12-28  267.399994  \n","2020-12-29  277.000000  \n","2020-12-30  276.779999  \n","2020-12-31  271.869995  \n","\n","[756 rows x 6 columns]"],"text/html":["\n","  <div id=\"df-11d11a41-bc22-4a06-be11-db6ee4bf98a6\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>High</th>\n","      <th>Low</th>\n","      <th>Open</th>\n","      <th>Close</th>\n","      <th>Volume</th>\n","      <th>Adj Close</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2018-01-02</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-03</th>\n","      <td>181.580002</td>\n","      <td>177.550003</td>\n","      <td>177.679993</td>\n","      <td>181.419998</td>\n","      <td>18151900.0</td>\n","      <td>181.419998</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-04</th>\n","      <td>184.779999</td>\n","      <td>181.330002</td>\n","      <td>181.880005</td>\n","      <td>184.669998</td>\n","      <td>16886600.0</td>\n","      <td>184.669998</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-05</th>\n","      <td>186.210007</td>\n","      <td>184.100006</td>\n","      <td>184.899994</td>\n","      <td>184.330002</td>\n","      <td>13880900.0</td>\n","      <td>184.330002</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-08</th>\n","      <td>186.899994</td>\n","      <td>184.929993</td>\n","      <td>185.589996</td>\n","      <td>186.850006</td>\n","      <td>13574500.0</td>\n","      <td>186.850006</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2020-12-24</th>\n","      <td>272.170013</td>\n","      <td>266.230011</td>\n","      <td>266.890015</td>\n","      <td>268.109985</td>\n","      <td>14329000.0</td>\n","      <td>268.109985</td>\n","    </tr>\n","    <tr>\n","      <th>2020-12-28</th>\n","      <td>270.399994</td>\n","      <td>266.200012</td>\n","      <td>268.880005</td>\n","      <td>267.399994</td>\n","      <td>6702000.0</td>\n","      <td>267.399994</td>\n","    </tr>\n","    <tr>\n","      <th>2020-12-29</th>\n","      <td>277.299988</td>\n","      <td>265.660004</td>\n","      <td>268.739990</td>\n","      <td>277.000000</td>\n","      <td>23299700.0</td>\n","      <td>277.000000</td>\n","    </tr>\n","    <tr>\n","      <th>2020-12-30</th>\n","      <td>280.510010</td>\n","      <td>276.279999</td>\n","      <td>276.950012</td>\n","      <td>276.779999</td>\n","      <td>16383000.0</td>\n","      <td>276.779999</td>\n","    </tr>\n","    <tr>\n","      <th>2020-12-31</th>\n","      <td>278.079987</td>\n","      <td>271.709991</td>\n","      <td>277.950012</td>\n","      <td>271.869995</td>\n","      <td>11803800.0</td>\n","      <td>271.869995</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>756 rows × 6 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-11d11a41-bc22-4a06-be11-db6ee4bf98a6')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-11d11a41-bc22-4a06-be11-db6ee4bf98a6 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-11d11a41-bc22-4a06-be11-db6ee4bf98a6');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-b1ab2193-1c18-46f5-a6db-ebf900d1b97b\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b1ab2193-1c18-46f5-a6db-ebf900d1b97b')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-b1ab2193-1c18-46f5-a6db-ebf900d1b97b button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"fb\",\n  \"rows\": 756,\n  \"fields\": [\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2018-01-02 00:00:00\",\n        \"max\": \"2020-12-31 00:00:00\",\n        \"num_unique_values\": 756,\n        \"samples\": [\n          \"2019-08-16 00:00:00\",\n          \"2018-05-22 00:00:00\",\n          \"2019-09-10 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"High\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 38.88113253193933,\n        \"min\": 129.74000549316406,\n        \"max\": 304.6700134277344,\n        \"num_unique_values\": 716,\n        \"samples\": [\n          199.1000061035156,\n          183.4900054931641,\n          182.8800048828125\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Low\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 37.873092973658565,\n        \"min\": 123.0199966430664,\n        \"max\": 293.04998779296875,\n        \"num_unique_values\": 726,\n        \"samples\": [\n          187.8500061035156,\n          195.4900054931641,\n          223.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Open\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 38.41028417888738,\n        \"min\": 123.0999984741211,\n        \"max\": 300.1600036621094,\n        \"num_unique_values\": 719,\n        \"samples\": [\n          200.0,\n          175.99000549316406,\n          182.3000030517578\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Close\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 38.39967530288588,\n        \"min\": 124.05999755859376,\n        \"max\": 303.9100036621094,\n        \"num_unique_values\": 731,\n        \"samples\": [\n          272.94000244140625,\n          176.00999450683594,\n          165.44000244140625\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Volume\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14287555.774077334,\n        \"min\": 6046300.0,\n        \"max\": 169803700.0,\n        \"num_unique_values\": 754,\n        \"samples\": [\n          19250700.0,\n          20520300.0,\n          45241600.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Adj Close\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 38.39967530288588,\n        \"min\": 124.05999755859376,\n        \"max\": 303.9100036621094,\n        \"num_unique_values\": 731,\n        \"samples\": [\n          272.94000244140625,\n          176.00999450683594,\n          165.44000244140625\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":5}]},{"cell_type":"markdown","source":["#### Compound Annual Growth Rate (CAGR)\n","\n","For an investment that grows or declines over multiple periods of time, the compound annual growth rate (CAGR) is often used to represent the average annual rate of return.\n","\n","The formula for CAGR is:\n","\n","(Final Value / Initial Value)^(1 / Number of Periods) - 1\n","\n","Where:\n","- `Final Value` is the value of the investment at the end of the period.\n","- `Initial Value` is the initial value of the investment.\n","- `Number of Periods` is the total number of periods over which the investment has grown or declined.\n"],"metadata":{"id":"qbVp1z-DBA4L"}},{"cell_type":"code","source":["fb['ROR'] = fb['Close'] / fb['Close'].shift() - 1"],"metadata":{"id":"2ozb4VvJAC2r","executionInfo":{"status":"ok","timestamp":1711709196162,"user_tz":-180,"elapsed":63,"user":{"displayName":"Kosam Omollo","userId":"10545480591997447540"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["fb.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":238},"id":"iOdpx6PRB5Cm","executionInfo":{"status":"ok","timestamp":1711709196162,"user_tz":-180,"elapsed":62,"user":{"displayName":"Kosam Omollo","userId":"10545480591997447540"}},"outputId":"aac312cf-05c3-4f86-b2d0-1baf7bd224d1"},"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                  High         Low        Open       Close    Volume  \\\n","Date                                                                   \n","2018-01-02  181.580002  177.550003  177.679993  181.419998  18151900   \n","2018-01-03  184.779999  181.330002  181.880005  184.669998  16886600   \n","2018-01-04  186.210007  184.100006  184.899994  184.330002  13880900   \n","2018-01-05  186.899994  184.929993  185.589996  186.850006  13574500   \n","2018-01-08  188.899994  186.330002  187.199997  188.279999  17994700   \n","\n","             Adj Close       ROR  \n","Date                              \n","2018-01-02  181.419998       NaN  \n","2018-01-03  184.669998  0.017914  \n","2018-01-04  184.330002 -0.001841  \n","2018-01-05  186.850006  0.013671  \n","2018-01-08  188.279999  0.007653  "],"text/html":["\n","  <div id=\"df-fcc436e0-86e1-4dd6-9712-afd0ae4237f9\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>High</th>\n","      <th>Low</th>\n","      <th>Open</th>\n","      <th>Close</th>\n","      <th>Volume</th>\n","      <th>Adj Close</th>\n","      <th>ROR</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2018-01-02</th>\n","      <td>181.580002</td>\n","      <td>177.550003</td>\n","      <td>177.679993</td>\n","      <td>181.419998</td>\n","      <td>18151900</td>\n","      <td>181.419998</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-03</th>\n","      <td>184.779999</td>\n","      <td>181.330002</td>\n","      <td>181.880005</td>\n","      <td>184.669998</td>\n","      <td>16886600</td>\n","      <td>184.669998</td>\n","      <td>0.017914</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-04</th>\n","      <td>186.210007</td>\n","      <td>184.100006</td>\n","      <td>184.899994</td>\n","      <td>184.330002</td>\n","      <td>13880900</td>\n","      <td>184.330002</td>\n","      <td>-0.001841</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-05</th>\n","      <td>186.899994</td>\n","      <td>184.929993</td>\n","      <td>185.589996</td>\n","      <td>186.850006</td>\n","      <td>13574500</td>\n","      <td>186.850006</td>\n","      <td>0.013671</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-08</th>\n","      <td>188.899994</td>\n","      <td>186.330002</td>\n","      <td>187.199997</td>\n","      <td>188.279999</td>\n","      <td>17994700</td>\n","      <td>188.279999</td>\n","      <td>0.007653</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fcc436e0-86e1-4dd6-9712-afd0ae4237f9')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-fcc436e0-86e1-4dd6-9712-afd0ae4237f9 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-fcc436e0-86e1-4dd6-9712-afd0ae4237f9');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-c839bb7b-9ac9-42a5-be76-f4ac7d8e3c48\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c839bb7b-9ac9-42a5-be76-f4ac7d8e3c48')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-c839bb7b-9ac9-42a5-be76-f4ac7d8e3c48 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"fb","summary":"{\n  \"name\": \"fb\",\n  \"rows\": 756,\n  \"fields\": [\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2018-01-02 00:00:00\",\n        \"max\": \"2020-12-31 00:00:00\",\n        \"num_unique_values\": 756,\n        \"samples\": [\n          \"2019-08-16 00:00:00\",\n          \"2018-05-22 00:00:00\",\n          \"2019-09-10 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"High\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 38.96082858834079,\n        \"min\": 129.74000549316406,\n        \"max\": 304.6700134277344,\n        \"num_unique_values\": 717,\n        \"samples\": [\n          199.1000061035156,\n          183.4900054931641,\n          182.8800048828125\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Low\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 37.950350992599425,\n        \"min\": 123.0199966430664,\n        \"max\": 293.04998779296875,\n        \"num_unique_values\": 727,\n        \"samples\": [\n          212.6499938964844,\n          264.0,\n          200.9600067138672\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Open\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 38.484810689493955,\n        \"min\": 123.0999984741211,\n        \"max\": 300.1600036621094,\n        \"num_unique_values\": 720,\n        \"samples\": [\n          183.0800018310547,\n          172.89999389648438,\n          164.8000030517578\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Close\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 38.47702663484276,\n        \"min\": 124.05999755859376,\n        \"max\": 303.9100036621094,\n        \"num_unique_values\": 732,\n        \"samples\": [\n          220.63999938964844,\n          176.00999450683594,\n          165.44000244140625\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Volume\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14282024,\n        \"min\": 6046300,\n        \"max\": 169803700,\n        \"num_unique_values\": 755,\n        \"samples\": [\n          11097800,\n          13109200,\n          18783000\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Adj Close\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 38.47702663484276,\n        \"min\": 124.05999755859376,\n        \"max\": 303.9100036621094,\n        \"num_unique_values\": 732,\n        \"samples\": [\n          220.63999938964844,\n          176.00999450683594,\n          165.44000244140625\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ROR\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.02394053030145176,\n        \"min\": -0.1896092206582256,\n        \"max\": 0.10816383772447047,\n        \"num_unique_values\": 754,\n        \"samples\": [\n          0.00676096898133749,\n          0.024485848913534225,\n          -0.020265245089891804\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":7}]},{"cell_type":"markdown","source":["#### % - change\n","\n","Pi = (Vi / vi-i) - 1\n","\n","- Pi: Percentage change value\n","- Vi: Current value\n","- Vi-i : Previous value"],"metadata":{"id":"pf2nKK1VB6hI"}},{"cell_type":"code","source":["fb['%-change'] = fb['Close'].pct_change()"],"metadata":{"id":"JRWpj8lECJNq","executionInfo":{"status":"ok","timestamp":1711709196163,"user_tz":-180,"elapsed":60,"user":{"displayName":"Kosam Omollo","userId":"10545480591997447540"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["fb.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":238},"id":"gvIteSD4CTLr","executionInfo":{"status":"ok","timestamp":1711709196164,"user_tz":-180,"elapsed":59,"user":{"displayName":"Kosam Omollo","userId":"10545480591997447540"}},"outputId":"c2958c5e-03d2-4f93-abfd-a1fde0035327"},"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                  High         Low        Open       Close    Volume  \\\n","Date                                                                   \n","2018-01-02  181.580002  177.550003  177.679993  181.419998  18151900   \n","2018-01-03  184.779999  181.330002  181.880005  184.669998  16886600   \n","2018-01-04  186.210007  184.100006  184.899994  184.330002  13880900   \n","2018-01-05  186.899994  184.929993  185.589996  186.850006  13574500   \n","2018-01-08  188.899994  186.330002  187.199997  188.279999  17994700   \n","\n","             Adj Close       ROR  %-change  \n","Date                                        \n","2018-01-02  181.419998       NaN       NaN  \n","2018-01-03  184.669998  0.017914  0.017914  \n","2018-01-04  184.330002 -0.001841 -0.001841  \n","2018-01-05  186.850006  0.013671  0.013671  \n","2018-01-08  188.279999  0.007653  0.007653  "],"text/html":["\n","  <div id=\"df-dc84fa56-25c1-426e-a117-44951f34ba2a\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>High</th>\n","      <th>Low</th>\n","      <th>Open</th>\n","      <th>Close</th>\n","      <th>Volume</th>\n","      <th>Adj Close</th>\n","      <th>ROR</th>\n","      <th>%-change</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2018-01-02</th>\n","      <td>181.580002</td>\n","      <td>177.550003</td>\n","      <td>177.679993</td>\n","      <td>181.419998</td>\n","      <td>18151900</td>\n","      <td>181.419998</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-03</th>\n","      <td>184.779999</td>\n","      <td>181.330002</td>\n","      <td>181.880005</td>\n","      <td>184.669998</td>\n","      <td>16886600</td>\n","      <td>184.669998</td>\n","      <td>0.017914</td>\n","      <td>0.017914</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-04</th>\n","      <td>186.210007</td>\n","      <td>184.100006</td>\n","      <td>184.899994</td>\n","      <td>184.330002</td>\n","      <td>13880900</td>\n","      <td>184.330002</td>\n","      <td>-0.001841</td>\n","      <td>-0.001841</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-05</th>\n","      <td>186.899994</td>\n","      <td>184.929993</td>\n","      <td>185.589996</td>\n","      <td>186.850006</td>\n","      <td>13574500</td>\n","      <td>186.850006</td>\n","      <td>0.013671</td>\n","      <td>0.013671</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-08</th>\n","      <td>188.899994</td>\n","      <td>186.330002</td>\n","      <td>187.199997</td>\n","      <td>188.279999</td>\n","      <td>17994700</td>\n","      <td>188.279999</td>\n","      <td>0.007653</td>\n","      <td>0.007653</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-dc84fa56-25c1-426e-a117-44951f34ba2a')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-dc84fa56-25c1-426e-a117-44951f34ba2a button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-dc84fa56-25c1-426e-a117-44951f34ba2a');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-7e7ccaff-f750-4a90-b82c-132b4629a74c\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7e7ccaff-f750-4a90-b82c-132b4629a74c')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-7e7ccaff-f750-4a90-b82c-132b4629a74c button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"fb","summary":"{\n  \"name\": \"fb\",\n  \"rows\": 756,\n  \"fields\": [\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2018-01-02 00:00:00\",\n        \"max\": \"2020-12-31 00:00:00\",\n        \"num_unique_values\": 756,\n        \"samples\": [\n          \"2019-08-16 00:00:00\",\n          \"2018-05-22 00:00:00\",\n          \"2019-09-10 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"High\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 38.96082858834079,\n        \"min\": 129.74000549316406,\n        \"max\": 304.6700134277344,\n        \"num_unique_values\": 717,\n        \"samples\": [\n          199.1000061035156,\n          183.4900054931641,\n          182.8800048828125\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Low\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 37.950350992599425,\n        \"min\": 123.0199966430664,\n        \"max\": 293.04998779296875,\n        \"num_unique_values\": 727,\n        \"samples\": [\n          212.6499938964844,\n          264.0,\n          200.9600067138672\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Open\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 38.484810689493955,\n        \"min\": 123.0999984741211,\n        \"max\": 300.1600036621094,\n        \"num_unique_values\": 720,\n        \"samples\": [\n          183.0800018310547,\n          172.89999389648438,\n          164.8000030517578\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Close\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 38.47702663484276,\n        \"min\": 124.05999755859376,\n        \"max\": 303.9100036621094,\n        \"num_unique_values\": 732,\n        \"samples\": [\n          220.63999938964844,\n          176.00999450683594,\n          165.44000244140625\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Volume\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14282024,\n        \"min\": 6046300,\n        \"max\": 169803700,\n        \"num_unique_values\": 755,\n        \"samples\": [\n          11097800,\n          13109200,\n          18783000\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Adj Close\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 38.47702663484276,\n        \"min\": 124.05999755859376,\n        \"max\": 303.9100036621094,\n        \"num_unique_values\": 732,\n        \"samples\": [\n          220.63999938964844,\n          176.00999450683594,\n          165.44000244140625\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ROR\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.02394053030145176,\n        \"min\": -0.1896092206582256,\n        \"max\": 0.10816383772447047,\n        \"num_unique_values\": 754,\n        \"samples\": [\n          0.00676096898133749,\n          0.024485848913534225,\n          -0.020265245089891804\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"%-change\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.02394053030145176,\n        \"min\": -0.1896092206582256,\n        \"max\": 0.10816383772447047,\n        \"num_unique_values\": 754,\n        \"samples\": [\n          0.00676096898133749,\n          0.024485848913534225,\n          -0.020265245089891804\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":9}]},{"cell_type":"markdown","source":["#### Normalization\n","\n","Ni = (Vi / Vinit) * 100\n","\n","- Ni: Normalized value\n","- Vi: Current value\n","- Vinit: Initial value"],"metadata":{"id":"kgHjYEbGCVQJ"}},{"cell_type":"code","source":["fb['Norm'] = fb['Close'] / fb.iloc[0]['Close'] * 100"],"metadata":{"id":"iwDEC8cBC-U8","executionInfo":{"status":"ok","timestamp":1711709196165,"user_tz":-180,"elapsed":55,"user":{"displayName":"Kosam Omollo","userId":"10545480591997447540"}}},"execution_count":10,"outputs":[]},{"cell_type":"code","source":["fb.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":238},"id":"RyOY2kT7DrWJ","executionInfo":{"status":"ok","timestamp":1711709196165,"user_tz":-180,"elapsed":54,"user":{"displayName":"Kosam Omollo","userId":"10545480591997447540"}},"outputId":"dab244de-35b3-4b45-de62-8266272b848d"},"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                  High         Low        Open       Close    Volume  \\\n","Date                                                                   \n","2018-01-02  181.580002  177.550003  177.679993  181.419998  18151900   \n","2018-01-03  184.779999  181.330002  181.880005  184.669998  16886600   \n","2018-01-04  186.210007  184.100006  184.899994  184.330002  13880900   \n","2018-01-05  186.899994  184.929993  185.589996  186.850006  13574500   \n","2018-01-08  188.899994  186.330002  187.199997  188.279999  17994700   \n","\n","             Adj Close       ROR  %-change        Norm  \n","Date                                                    \n","2018-01-02  181.419998       NaN       NaN  100.000000  \n","2018-01-03  184.669998  0.017914  0.017914  101.791423  \n","2018-01-04  184.330002 -0.001841 -0.001841  101.604015  \n","2018-01-05  186.850006  0.013671  0.013671  102.993059  \n","2018-01-08  188.279999  0.007653  0.007653  103.781281  "],"text/html":["\n","  <div id=\"df-62844b26-db84-4370-aedc-176f5fe0dfd3\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>High</th>\n","      <th>Low</th>\n","      <th>Open</th>\n","      <th>Close</th>\n","      <th>Volume</th>\n","      <th>Adj Close</th>\n","      <th>ROR</th>\n","      <th>%-change</th>\n","      <th>Norm</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2018-01-02</th>\n","      <td>181.580002</td>\n","      <td>177.550003</td>\n","      <td>177.679993</td>\n","      <td>181.419998</td>\n","      <td>18151900</td>\n","      <td>181.419998</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>100.000000</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-03</th>\n","      <td>184.779999</td>\n","      <td>181.330002</td>\n","      <td>181.880005</td>\n","      <td>184.669998</td>\n","      <td>16886600</td>\n","      <td>184.669998</td>\n","      <td>0.017914</td>\n","      <td>0.017914</td>\n","      <td>101.791423</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-04</th>\n","      <td>186.210007</td>\n","      <td>184.100006</td>\n","      <td>184.899994</td>\n","      <td>184.330002</td>\n","      <td>13880900</td>\n","      <td>184.330002</td>\n","      <td>-0.001841</td>\n","      <td>-0.001841</td>\n","      <td>101.604015</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-05</th>\n","      <td>186.899994</td>\n","      <td>184.929993</td>\n","      <td>185.589996</td>\n","      <td>186.850006</td>\n","      <td>13574500</td>\n","      <td>186.850006</td>\n","      <td>0.013671</td>\n","      <td>0.013671</td>\n","      <td>102.993059</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-08</th>\n","      <td>188.899994</td>\n","      <td>186.330002</td>\n","      <td>187.199997</td>\n","      <td>188.279999</td>\n","      <td>17994700</td>\n","      <td>188.279999</td>\n","      <td>0.007653</td>\n","      <td>0.007653</td>\n","      <td>103.781281</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-62844b26-db84-4370-aedc-176f5fe0dfd3')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-62844b26-db84-4370-aedc-176f5fe0dfd3 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-62844b26-db84-4370-aedc-176f5fe0dfd3');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-31dbf527-3da4-4d5a-8477-bbf7077454b8\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-31dbf527-3da4-4d5a-8477-bbf7077454b8')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-31dbf527-3da4-4d5a-8477-bbf7077454b8 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"fb","summary":"{\n  \"name\": \"fb\",\n  \"rows\": 756,\n  \"fields\": [\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2018-01-02 00:00:00\",\n        \"max\": \"2020-12-31 00:00:00\",\n        \"num_unique_values\": 756,\n        \"samples\": [\n          \"2019-08-16 00:00:00\",\n          \"2018-05-22 00:00:00\",\n          \"2019-09-10 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"High\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 38.96082858834079,\n        \"min\": 129.74000549316406,\n        \"max\": 304.6700134277344,\n        \"num_unique_values\": 717,\n        \"samples\": [\n          199.1000061035156,\n          183.4900054931641,\n          182.8800048828125\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Low\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 37.950350992599425,\n        \"min\": 123.0199966430664,\n        \"max\": 293.04998779296875,\n        \"num_unique_values\": 727,\n        \"samples\": [\n          212.6499938964844,\n          264.0,\n          200.9600067138672\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Open\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 38.484810689493955,\n        \"min\": 123.0999984741211,\n        \"max\": 300.1600036621094,\n        \"num_unique_values\": 720,\n        \"samples\": [\n          183.0800018310547,\n          172.89999389648438,\n          164.8000030517578\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Close\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 38.47702663484276,\n        \"min\": 124.05999755859376,\n        \"max\": 303.9100036621094,\n        \"num_unique_values\": 732,\n        \"samples\": [\n          220.63999938964844,\n          176.00999450683594,\n          165.44000244140625\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Volume\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14282024,\n        \"min\": 6046300,\n        \"max\": 169803700,\n        \"num_unique_values\": 755,\n        \"samples\": [\n          11097800,\n          13109200,\n          18783000\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Adj Close\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 38.47702663484276,\n        \"min\": 124.05999755859376,\n        \"max\": 303.9100036621094,\n        \"num_unique_values\": 732,\n        \"samples\": [\n          220.63999938964844,\n          176.00999450683594,\n          165.44000244140625\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ROR\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.02394053030145176,\n        \"min\": -0.1896092206582256,\n        \"max\": 0.10816383772447047,\n        \"num_unique_values\": 754,\n        \"samples\": [\n          0.00676096898133749,\n          0.024485848913534225,\n          -0.020265245089891804\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"%-change\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.02394053030145176,\n        \"min\": -0.1896092206582256,\n        \"max\": 0.10816383772447047,\n        \"num_unique_values\": 754,\n        \"samples\": [\n          0.00676096898133749,\n          0.024485848913534225,\n          -0.020265245089891804\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Norm\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 21.208812161386675,\n        \"min\": 68.38275758500686,\n        \"max\": 167.51736673434237,\n        \"num_unique_values\": 732,\n        \"samples\": [\n          121.61834506479265,\n          97.0179673042046,\n          91.19171211066937\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":11}]},{"cell_type":"code","source":["# Annual rate of return\n","fb.iloc[-1]['Close'] / fb.iloc[0]['Close'] - 1"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5pkRi6o6DsgS","executionInfo":{"status":"ok","timestamp":1711709196165,"user_tz":-180,"elapsed":52,"user":{"displayName":"Kosam Omollo","userId":"10545480591997447540"}},"outputId":"7be25902-a886-42af-ee47-f00271847fd2"},"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.5056774689620063"]},"metadata":{},"execution_count":12}]},{"cell_type":"code","source":["fb['ROR'] = fb['Close'].pct_change()"],"metadata":{"id":"6ignWT3rE_x0","executionInfo":{"status":"ok","timestamp":1711709196168,"user_tz":-180,"elapsed":51,"user":{"displayName":"Kosam Omollo","userId":"10545480591997447540"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":["fb['GF'] = fb['ROR'] + 1"],"metadata":{"id":"yWWi911BFIzO","executionInfo":{"status":"ok","timestamp":1711709196168,"user_tz":-180,"elapsed":51,"user":{"displayName":"Kosam Omollo","userId":"10545480591997447540"}}},"execution_count":14,"outputs":[]},{"cell_type":"code","source":["fb['GF'].prod() - 1"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OnwTsUklFKJv","executionInfo":{"status":"ok","timestamp":1711709196169,"user_tz":-180,"elapsed":51,"user":{"displayName":"Kosam Omollo","userId":"10545480591997447540"}},"outputId":"e6362f24-a817-40ef-bb6d-51aac58dd10d"},"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.5056774689620078"]},"metadata":{},"execution_count":15}]},{"cell_type":"code","source":["fb.iloc[0]['Close'] * fb['GF'].prod()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UeGuGIZdFVoa","executionInfo":{"status":"ok","timestamp":1711709196169,"user_tz":-180,"elapsed":48,"user":{"displayName":"Kosam Omollo","userId":"10545480591997447540"}},"outputId":"007a44d0-0af4-4b7a-e758-b74a6ae18bab"},"execution_count":16,"outputs":[{"output_type":"execute_result","data":{"text/plain":["273.16000366210966"]},"metadata":{},"execution_count":16}]},{"cell_type":"code","source":["fb.iloc[-1]['Close']"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mskRmnGKFwnd","executionInfo":{"status":"ok","timestamp":1711709196169,"user_tz":-180,"elapsed":46,"user":{"displayName":"Kosam Omollo","userId":"10545480591997447540"}},"outputId":"042abfdc-7da6-481f-cb70-a7aa6f59d0c5"},"execution_count":17,"outputs":[{"output_type":"execute_result","data":{"text/plain":["273.1600036621094"]},"metadata":{},"execution_count":17}]},{"cell_type":"code","source":["len(fb)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WnCjQYiUF1Fb","executionInfo":{"status":"ok","timestamp":1711709196170,"user_tz":-180,"elapsed":46,"user":{"displayName":"Kosam Omollo","userId":"10545480591997447540"}},"outputId":"17ccd818-7c55-403a-f16c-292e6939a83a"},"execution_count":18,"outputs":[{"output_type":"execute_result","data":{"text/plain":["756"]},"metadata":{},"execution_count":18}]},{"cell_type":"code","source":["cagr = (fb.iloc[-1]['Close'] / fb.iloc[0]['Close']) ** (1/len(fb)) - 1"],"metadata":{"id":"XDEjy2ncGWiz","executionInfo":{"status":"ok","timestamp":1711709196170,"user_tz":-180,"elapsed":44,"user":{"displayName":"Kosam Omollo","userId":"10545480591997447540"}}},"execution_count":19,"outputs":[]},{"cell_type":"code","source":["cagr"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"i1-8Be3dG2pQ","executionInfo":{"status":"ok","timestamp":1711709196170,"user_tz":-180,"elapsed":43,"user":{"displayName":"Kosam Omollo","userId":"10545480591997447540"}},"outputId":"628f983f-fd69-4f39-e469-16de82b6316f"},"execution_count":20,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.0005414731871022926"]},"metadata":{},"execution_count":20}]},{"cell_type":"code","source":["(1 + cagr)**len(fb)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"U0UFYl-GG3lz","executionInfo":{"status":"ok","timestamp":1711709196171,"user_tz":-180,"elapsed":41,"user":{"displayName":"Kosam Omollo","userId":"10545480591997447540"}},"outputId":"709fca72-c812-4384-b085-6efffd8f780f"},"execution_count":21,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1.5056774689619246"]},"metadata":{},"execution_count":21}]},{"cell_type":"code","source":["upload_files(\"ticker-goog.csv\")\n","goog = pd.read_csv(\"ticker-goog.csv\", index_col=0, parse_dates=True)\n","upload_files(\"ticker-nvda.csv\")\n","nvda = pd.read_csv(\"ticker-nvda.csv\", index_col=0, parse_dates=True)\n","upload_files(\"ticker-hp.csv\")\n","hp = pd.read_csv(\"ticker-hp.csv\", index_col=0, parse_dates=True)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":238},"id":"PV-7a7rGG_0D","executionInfo":{"status":"ok","timestamp":1711709234288,"user_tz":-180,"elapsed":38155,"user":{"displayName":"Kosam Omollo","userId":"10545480591997447540"}},"outputId":"f7803dbb-1b0b-4039-c1df-d1d527dbf2e1"},"execution_count":22,"outputs":[{"output_type":"stream","name":"stdout","text":["uploading....ticker-goog.csv....\n"]},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-8c7a4c5d-77e3-4420-800f-16f7e928bbb5\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-8c7a4c5d-77e3-4420-800f-16f7e928bbb5\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving ticker-goog.csv to ticker-goog.csv\n","uploading....ticker-nvda.csv....\n"]},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-c220a2fb-3d8f-436e-ae28-a832eb001798\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-c220a2fb-3d8f-436e-ae28-a832eb001798\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving ticker-nvda.csv to ticker-nvda.csv\n","uploading....ticker-hp.csv....\n"]},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-9c863d6b-2d0d-41c7-ac29-2684b047282e\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-9c863d6b-2d0d-41c7-ac29-2684b047282e\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving ticker-hp.csv to ticker-hp.csv\n"]}]},{"cell_type":"code","source":["data = pd.concat([fb['Adj Close'], goog['Adj Close'], hp['Adj Close'], nvda['Adj Close']], axis=1)"],"metadata":{"id":"t1yrlZgiH8pg","executionInfo":{"status":"ok","timestamp":1711709234289,"user_tz":-180,"elapsed":43,"user":{"displayName":"Kosam Omollo","userId":"10545480591997447540"}}},"execution_count":23,"outputs":[]},{"cell_type":"code","source":["data.columns = ['FB', 'GOOG', 'HP', 'NVDA']"],"metadata":{"id":"NNBbzb0DIj3y","executionInfo":{"status":"ok","timestamp":1711709234289,"user_tz":-180,"elapsed":12,"user":{"displayName":"Kosam Omollo","userId":"10545480591997447540"}}},"execution_count":24,"outputs":[]},{"cell_type":"code","source":["data.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":238},"id":"lvNCn_mvIklE","executionInfo":{"status":"ok","timestamp":1711709234290,"user_tz":-180,"elapsed":12,"user":{"displayName":"Kosam Omollo","userId":"10545480591997447540"}},"outputId":"707cf008-8a66-4d04-9035-0a8466f49870"},"execution_count":25,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                    FB  GOOG  HP  NVDA\n","Date                                  \n","2018-01-02  181.419998   NaN NaN   NaN\n","2018-01-03  184.669998   NaN NaN   NaN\n","2018-01-04  184.330002   NaN NaN   NaN\n","2018-01-05  186.850006   NaN NaN   NaN\n","2018-01-08  188.279999   NaN NaN   NaN"],"text/html":["\n","  <div id=\"df-2c8d0570-4670-4ed8-8516-b9f27452035e\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>FB</th>\n","      <th>GOOG</th>\n","      <th>HP</th>\n","      <th>NVDA</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2018-01-02</th>\n","      <td>181.419998</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-03</th>\n","      <td>184.669998</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-04</th>\n","      <td>184.330002</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-05</th>\n","      <td>186.850006</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-08</th>\n","      <td>188.279999</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2c8d0570-4670-4ed8-8516-b9f27452035e')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-2c8d0570-4670-4ed8-8516-b9f27452035e button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-2c8d0570-4670-4ed8-8516-b9f27452035e');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-82f9b58f-92a9-4789-8bbf-5171fd67aa7d\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-82f9b58f-92a9-4789-8bbf-5171fd67aa7d')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-82f9b58f-92a9-4789-8bbf-5171fd67aa7d button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"data","summary":"{\n  \"name\": \"data\",\n  \"rows\": 756,\n  \"fields\": [\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2018-01-02 00:00:00\",\n        \"max\": \"2020-12-31 00:00:00\",\n        \"num_unique_values\": 756,\n        \"samples\": [\n          \"2019-08-16 00:00:00\",\n          \"2018-05-22 00:00:00\",\n          \"2019-09-10 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"FB\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 38.47702663484276,\n        \"min\": 124.05999755859376,\n        \"max\": 303.9100036621094,\n        \"num_unique_values\": 732,\n        \"samples\": [\n          220.63999938964844,\n          176.00999450683594,\n          165.44000244140625\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GOOG\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 175.96785444466045,\n        \"min\": 1056.6199951171875,\n        \"max\": 1827.989990234375,\n        \"num_unique_values\": 252,\n        \"samples\": [\n          1634.3299560546875,\n          1429.72998046875,\n          1403.8399658203125\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"HP\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8.735073715059537,\n        \"min\": 11.903286933898926,\n        \"max\": 43.13611602783203,\n        \"num_unique_values\": 241,\n        \"samples\": [\n          40.07129669189453,\n          42.55974578857422,\n          23.96999931335449\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NVDA\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 117.38068413701305,\n        \"min\": 196.19371032714844,\n        \"max\": 582.3079223632812,\n        \"num_unique_values\": 253,\n        \"samples\": [\n          504.9308166503906,\n          243.91751098632807,\n          296.7679748535156\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":25}]},{"cell_type":"code","source":["data.tail()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":238},"id":"jcoAXGXMI4UP","executionInfo":{"status":"ok","timestamp":1711709234290,"user_tz":-180,"elapsed":10,"user":{"displayName":"Kosam Omollo","userId":"10545480591997447540"}},"outputId":"78856671-1191-41b9-df17-e1445ad9e583"},"execution_count":26,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                    FB         GOOG         HP        NVDA\n","Date                                                      \n","2020-12-24  267.399994  1738.849976  24.200001  519.750000\n","2020-12-28  277.000000  1776.089966  23.680000  516.000000\n","2020-12-29  276.779999  1758.719971  23.490000  517.729980\n","2020-12-30  271.869995  1739.520020  23.580000  525.830017\n","2020-12-31  273.160004  1751.880005  23.160000  522.200012"],"text/html":["\n","  <div id=\"df-6bed1961-425b-4a69-834d-9c55fea37dfb\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>FB</th>\n","      <th>GOOG</th>\n","      <th>HP</th>\n","      <th>NVDA</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2020-12-24</th>\n","      <td>267.399994</td>\n","      <td>1738.849976</td>\n","      <td>24.200001</td>\n","      <td>519.750000</td>\n","    </tr>\n","    <tr>\n","      <th>2020-12-28</th>\n","      <td>277.000000</td>\n","      <td>1776.089966</td>\n","      <td>23.680000</td>\n","      <td>516.000000</td>\n","    </tr>\n","    <tr>\n","      <th>2020-12-29</th>\n","      <td>276.779999</td>\n","      <td>1758.719971</td>\n","      <td>23.490000</td>\n","      <td>517.729980</td>\n","    </tr>\n","    <tr>\n","      <th>2020-12-30</th>\n","      <td>271.869995</td>\n","      <td>1739.520020</td>\n","      <td>23.580000</td>\n","      <td>525.830017</td>\n","    </tr>\n","    <tr>\n","      <th>2020-12-31</th>\n","      <td>273.160004</td>\n","      <td>1751.880005</td>\n","      <td>23.160000</td>\n","      <td>522.200012</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6bed1961-425b-4a69-834d-9c55fea37dfb')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-6bed1961-425b-4a69-834d-9c55fea37dfb button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-6bed1961-425b-4a69-834d-9c55fea37dfb');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-d2f976f5-5611-4f71-b756-0e5a873226e4\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d2f976f5-5611-4f71-b756-0e5a873226e4')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-d2f976f5-5611-4f71-b756-0e5a873226e4 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"data\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2020-12-24 00:00:00\",\n        \"max\": \"2020-12-31 00:00:00\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"2020-12-28 00:00:00\",\n          \"2020-12-31 00:00:00\",\n          \"2020-12-29 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"FB\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.9578452304787706,\n        \"min\": 267.3999938964844,\n        \"max\": 277.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          277.0,\n          273.1600036621094,\n          276.7799987792969\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GOOG\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 15.403338285655884,\n        \"min\": 1738.8499755859375,\n        \"max\": 1776.0899658203125,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1776.0899658203125,\n          1751.8800048828125,\n          1758.719970703125\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"HP\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.37751858404050387,\n        \"min\": 23.15999984741211,\n        \"max\": 24.200000762939453,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          23.68000030517578,\n          23.15999984741211,\n          23.489999771118164\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NVDA\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.8596831396099276,\n        \"min\": 516.0,\n        \"max\": 525.8300170898438,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          516.0,\n          522.2000122070312,\n          517.72998046875\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":26}]},{"cell_type":"code","source":["fig, ax = plt.subplots()\n","data.plot(ax=ax);"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":433},"id":"UH96DWC0I_ab","executionInfo":{"status":"ok","timestamp":1711709235964,"user_tz":-180,"elapsed":1683,"user":{"displayName":"Kosam Omollo","userId":"10545480591997447540"}},"outputId":"1e330d08-5bd3-433f-9a88-cdd6ccddf5fd"},"execution_count":27,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["data / data.iloc[0]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":455},"id":"e0qqz4t2JPqJ","executionInfo":{"status":"ok","timestamp":1711709235965,"user_tz":-180,"elapsed":91,"user":{"displayName":"Kosam Omollo","userId":"10545480591997447540"}},"outputId":"5ac8cf1f-befa-4e8d-fb3d-323f13cf6db9"},"execution_count":28,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                  FB  GOOG  HP  NVDA\n","Date                                \n","2018-01-02  1.000000   NaN NaN   NaN\n","2018-01-03  1.017914   NaN NaN   NaN\n","2018-01-04  1.016040   NaN NaN   NaN\n","2018-01-05  1.029931   NaN NaN   NaN\n","2018-01-08  1.037813   NaN NaN   NaN\n","...              ...   ...  ..   ...\n","2020-12-24  1.473928   NaN NaN   NaN\n","2020-12-28  1.526844   NaN NaN   NaN\n","2020-12-29  1.525631   NaN NaN   NaN\n","2020-12-30  1.498567   NaN NaN   NaN\n","2020-12-31  1.505677   NaN NaN   NaN\n","\n","[756 rows x 4 columns]"],"text/html":["\n","  <div id=\"df-b885edca-01b0-4f92-afb8-f2b71a2cc39f\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>FB</th>\n","      <th>GOOG</th>\n","      <th>HP</th>\n","      <th>NVDA</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2018-01-02</th>\n","      <td>1.000000</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-03</th>\n","      <td>1.017914</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-04</th>\n","      <td>1.016040</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-05</th>\n","      <td>1.029931</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-08</th>\n","      <td>1.037813</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2020-12-24</th>\n","      <td>1.473928</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2020-12-28</th>\n","      <td>1.526844</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2020-12-29</th>\n","      <td>1.525631</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2020-12-30</th>\n","      <td>1.498567</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2020-12-31</th>\n","      <td>1.505677</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>756 rows × 4 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b885edca-01b0-4f92-afb8-f2b71a2cc39f')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-b885edca-01b0-4f92-afb8-f2b71a2cc39f button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-b885edca-01b0-4f92-afb8-f2b71a2cc39f');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-045aed84-a683-40a9-9c5c-a78b45d1aaf2\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-045aed84-a683-40a9-9c5c-a78b45d1aaf2')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-045aed84-a683-40a9-9c5c-a78b45d1aaf2 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"data / data\",\n  \"rows\": 756,\n  \"fields\": [\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2018-01-02 00:00:00\",\n        \"max\": \"2020-12-31 00:00:00\",\n        \"num_unique_values\": 756,\n        \"samples\": [\n          \"2019-08-16 00:00:00\",\n          \"2018-05-22 00:00:00\",\n          \"2019-09-10 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"FB\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.21208812161386675,\n        \"min\": 0.6838275758500686,\n        \"max\": 1.6751736673434239,\n        \"num_unique_values\": 732,\n        \"samples\": [\n          1.2161834506479265,\n          0.970179673042046,\n          0.9119171211066937\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GOOG\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": null,\n        \"max\": null,\n        \"num_unique_values\": 0,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"HP\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": null,\n        \"max\": null,\n        \"num_unique_values\": 0,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NVDA\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": null,\n        \"max\": null,\n        \"num_unique_values\": 0,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":28}]},{"cell_type":"code","source":["data.pct_change()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":455},"id":"FjeikFBNJdS2","executionInfo":{"status":"ok","timestamp":1711709235966,"user_tz":-180,"elapsed":88,"user":{"displayName":"Kosam Omollo","userId":"10545480591997447540"}},"outputId":"3104a071-142d-4cea-8c43-6bb986db8ce7"},"execution_count":29,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                  FB      GOOG        HP      NVDA\n","Date                                              \n","2018-01-02       NaN       NaN       NaN       NaN\n","2018-01-03  0.017914       NaN       NaN       NaN\n","2018-01-04 -0.001841       NaN       NaN       NaN\n","2018-01-05  0.013671       NaN       NaN       NaN\n","2018-01-08  0.007653       NaN       NaN       NaN\n","...              ...       ...       ...       ...\n","2020-12-24 -0.002648  0.003735 -0.012648 -0.001191\n","2020-12-28  0.035901  0.021416 -0.021488 -0.007215\n","2020-12-29 -0.000794 -0.009780 -0.008024  0.003353\n","2020-12-30 -0.017740 -0.010917  0.003831  0.015645\n","2020-12-31  0.004745  0.007105 -0.017812 -0.006903\n","\n","[756 rows x 4 columns]"],"text/html":["\n","  <div id=\"df-b191d33a-067c-4c89-85a0-9818f8ef05d9\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>FB</th>\n","      <th>GOOG</th>\n","      <th>HP</th>\n","      <th>NVDA</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2018-01-02</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-03</th>\n","      <td>0.017914</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-04</th>\n","      <td>-0.001841</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-05</th>\n","      <td>0.013671</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-08</th>\n","      <td>0.007653</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2020-12-24</th>\n","      <td>-0.002648</td>\n","      <td>0.003735</td>\n","      <td>-0.012648</td>\n","      <td>-0.001191</td>\n","    </tr>\n","    <tr>\n","      <th>2020-12-28</th>\n","      <td>0.035901</td>\n","      <td>0.021416</td>\n","      <td>-0.021488</td>\n","      <td>-0.007215</td>\n","    </tr>\n","    <tr>\n","      <th>2020-12-29</th>\n","      <td>-0.000794</td>\n","      <td>-0.009780</td>\n","      <td>-0.008024</td>\n","      <td>0.003353</td>\n","    </tr>\n","    <tr>\n","      <th>2020-12-30</th>\n","      <td>-0.017740</td>\n","      <td>-0.010917</td>\n","      <td>0.003831</td>\n","      <td>0.015645</td>\n","    </tr>\n","    <tr>\n","      <th>2020-12-31</th>\n","      <td>0.004745</td>\n","      <td>0.007105</td>\n","      <td>-0.017812</td>\n","      <td>-0.006903</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>756 rows × 4 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b191d33a-067c-4c89-85a0-9818f8ef05d9')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-b191d33a-067c-4c89-85a0-9818f8ef05d9 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-b191d33a-067c-4c89-85a0-9818f8ef05d9');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-0d42413d-788e-4b9b-8563-8211fc4e3390\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0d42413d-788e-4b9b-8563-8211fc4e3390')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-0d42413d-788e-4b9b-8563-8211fc4e3390 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"data\",\n  \"rows\": 756,\n  \"fields\": [\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2018-01-02 00:00:00\",\n        \"max\": \"2020-12-31 00:00:00\",\n        \"num_unique_values\": 756,\n        \"samples\": [\n          \"2019-08-16 00:00:00\",\n          \"2018-05-22 00:00:00\",\n          \"2019-09-10 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"FB\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.02394053030145176,\n        \"min\": -0.1896092206582256,\n        \"max\": 0.10816383772447047,\n        \"num_unique_values\": 754,\n        \"samples\": [\n          0.00676096898133749,\n          0.024485848913534225,\n          -0.020265245089891804\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GOOG\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.02415016979200466,\n        \"min\": -0.11100819573363885,\n        \"max\": 0.09401650633289482,\n        \"num_unique_values\": 252,\n        \"samples\": [\n          0.006167713005355235,\n          0.006644611311070969,\n          0.006653242618838817\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"HP\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.058876570178183235,\n        \"min\": -0.32934790896196964,\n        \"max\": 0.2802547696736475,\n        \"num_unique_values\": 251,\n        \"samples\": [\n          0.03068497764433853,\n          -0.005804003340748265,\n          0.0024141050355854787\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NVDA\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.03648123147864003,\n        \"min\": -0.1845209075370996,\n        \"max\": 0.17156423849592062,\n        \"num_unique_values\": 252,\n        \"samples\": [\n          0.04113790484034152,\n          0.03135227706220034,\n          0.015489427748273776\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":29}]},{"cell_type":"code","source":["(data.pct_change() + 1).cumprod()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":455},"id":"2xUv_2jkJzvE","executionInfo":{"status":"ok","timestamp":1711709235967,"user_tz":-180,"elapsed":81,"user":{"displayName":"Kosam Omollo","userId":"10545480591997447540"}},"outputId":"db528ef6-4656-464d-aa5c-bb08e7a0bfa4"},"execution_count":30,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                  FB      GOOG        HP      NVDA\n","Date                                              \n","2018-01-02       NaN       NaN       NaN       NaN\n","2018-01-03  1.017914       NaN       NaN       NaN\n","2018-01-04  1.016040       NaN       NaN       NaN\n","2018-01-05  1.029931       NaN       NaN       NaN\n","2018-01-08  1.037813       NaN       NaN       NaN\n","...              ...       ...       ...       ...\n","2020-12-24  1.473928  1.271675  0.584313  2.170012\n","2020-12-28  1.526844  1.298910  0.571758  2.154356\n","2020-12-29  1.525631  1.286206  0.567170  2.161579\n","2020-12-30  1.498567  1.272165  0.569343  2.195397\n","2020-12-31  1.505677  1.281204  0.559202  2.180241\n","\n","[756 rows x 4 columns]"],"text/html":["\n","  <div id=\"df-43714ec2-d312-40ec-8ec8-436211d3d1fc\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>FB</th>\n","      <th>GOOG</th>\n","      <th>HP</th>\n","      <th>NVDA</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2018-01-02</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-03</th>\n","      <td>1.017914</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-04</th>\n","      <td>1.016040</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-05</th>\n","      <td>1.029931</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-08</th>\n","      <td>1.037813</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2020-12-24</th>\n","      <td>1.473928</td>\n","      <td>1.271675</td>\n","      <td>0.584313</td>\n","      <td>2.170012</td>\n","    </tr>\n","    <tr>\n","      <th>2020-12-28</th>\n","      <td>1.526844</td>\n","      <td>1.298910</td>\n","      <td>0.571758</td>\n","      <td>2.154356</td>\n","    </tr>\n","    <tr>\n","      <th>2020-12-29</th>\n","      <td>1.525631</td>\n","      <td>1.286206</td>\n","      <td>0.567170</td>\n","      <td>2.161579</td>\n","    </tr>\n","    <tr>\n","      <th>2020-12-30</th>\n","      <td>1.498567</td>\n","      <td>1.272165</td>\n","      <td>0.569343</td>\n","      <td>2.195397</td>\n","    </tr>\n","    <tr>\n","      <th>2020-12-31</th>\n","      <td>1.505677</td>\n","      <td>1.281204</td>\n","      <td>0.559202</td>\n","      <td>2.180241</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>756 rows × 4 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-43714ec2-d312-40ec-8ec8-436211d3d1fc')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-43714ec2-d312-40ec-8ec8-436211d3d1fc button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-43714ec2-d312-40ec-8ec8-436211d3d1fc');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-332d21c1-bb87-4f66-a98c-eddb628c5b65\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-332d21c1-bb87-4f66-a98c-eddb628c5b65')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-332d21c1-bb87-4f66-a98c-eddb628c5b65 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"(data\",\n  \"rows\": 756,\n  \"fields\": [\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2018-01-02 00:00:00\",\n        \"max\": \"2020-12-31 00:00:00\",\n        \"num_unique_values\": 756,\n        \"samples\": [\n          \"2019-08-16 00:00:00\",\n          \"2018-05-22 00:00:00\",\n          \"2019-09-10 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"FB\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.21220855512034767,\n        \"min\": 0.6838275758500696,\n        \"max\": 1.6751736673434268,\n        \"num_unique_values\": 751,\n        \"samples\": [\n          1.0910042700555085,\n          0.9555176267948468,\n          1.1574799229003054\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GOOG\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.1288389245206879,\n        \"min\": 0.772738906726289,\n        \"max\": 1.3368656594499226,\n        \"num_unique_values\": 252,\n        \"samples\": [\n          1.202607955455946,\n          1.0525534314839222,\n          1.0335023137536548\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"HP\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.20919451699151972,\n        \"min\": 0.28740687110873037,\n        \"max\": 1.0415287985737491,\n        \"num_unique_values\": 247,\n        \"samples\": [\n          1.0081692947109864,\n          1.0216479770279,\n          0.35360625996362205\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NVDA\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.48932444740157105,\n        \"min\": 0.819129901304976,\n        \"max\": 2.4311983813302556,\n        \"num_unique_values\": 252,\n        \"samples\": [\n          2.1944258844455313,\n          1.0503105083570958,\n          1.4908793107402507\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":30}]},{"cell_type":"code","source":["df = data / data.iloc[0]"],"metadata":{"id":"2l-IMM7KKGt2","executionInfo":{"status":"ok","timestamp":1711709235968,"user_tz":-180,"elapsed":75,"user":{"displayName":"Kosam Omollo","userId":"10545480591997447540"}}},"execution_count":31,"outputs":[]},{"cell_type":"code","source":["fig2, ax2 = plt.subplots()\n","df.plot(ax=ax2);"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":433},"id":"BfpiEk8TKQ4d","executionInfo":{"status":"ok","timestamp":1711709235969,"user_tz":-180,"elapsed":75,"user":{"displayName":"Kosam Omollo","userId":"10545480591997447540"}},"outputId":"964c4038-bcb9-4ace-bd99-91b20766c094"},"execution_count":32,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["norm = (data/data.iloc[0]) * 100"],"metadata":{"id":"9HrPEnS2KXPJ","executionInfo":{"status":"ok","timestamp":1711709235971,"user_tz":-180,"elapsed":68,"user":{"displayName":"Kosam Omollo","userId":"10545480591997447540"}}},"execution_count":33,"outputs":[]},{"cell_type":"code","source":["norm.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":238},"id":"z6sfze64Kmr_","executionInfo":{"status":"ok","timestamp":1711709235972,"user_tz":-180,"elapsed":65,"user":{"displayName":"Kosam Omollo","userId":"10545480591997447540"}},"outputId":"6698f46c-f972-49b7-88bf-e586d7ce12a6"},"execution_count":34,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                    FB  GOOG  HP  NVDA\n","Date                                  \n","2018-01-02  100.000000   NaN NaN   NaN\n","2018-01-03  101.791423   NaN NaN   NaN\n","2018-01-04  101.604015   NaN NaN   NaN\n","2018-01-05  102.993059   NaN NaN   NaN\n","2018-01-08  103.781281   NaN NaN   NaN"],"text/html":["\n","  <div id=\"df-3c5c980f-72f8-4dfd-a2b6-96d8a9fd87ac\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>FB</th>\n","      <th>GOOG</th>\n","      <th>HP</th>\n","      <th>NVDA</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2018-01-02</th>\n","      <td>100.000000</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-03</th>\n","      <td>101.791423</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-04</th>\n","      <td>101.604015</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-05</th>\n","      <td>102.993059</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-08</th>\n","      <td>103.781281</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3c5c980f-72f8-4dfd-a2b6-96d8a9fd87ac')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-3c5c980f-72f8-4dfd-a2b6-96d8a9fd87ac button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-3c5c980f-72f8-4dfd-a2b6-96d8a9fd87ac');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-604263df-3f12-4b9c-9640-861fa5a4cdf7\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-604263df-3f12-4b9c-9640-861fa5a4cdf7')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-604263df-3f12-4b9c-9640-861fa5a4cdf7 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"norm","summary":"{\n  \"name\": \"norm\",\n  \"rows\": 756,\n  \"fields\": [\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2018-01-02 00:00:00\",\n        \"max\": \"2020-12-31 00:00:00\",\n        \"num_unique_values\": 756,\n        \"samples\": [\n          \"2019-08-16 00:00:00\",\n          \"2018-05-22 00:00:00\",\n          \"2019-09-10 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"FB\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 21.208812161386675,\n        \"min\": 68.38275758500686,\n        \"max\": 167.51736673434237,\n        \"num_unique_values\": 732,\n        \"samples\": [\n          121.61834506479265,\n          97.0179673042046,\n          91.19171211066937\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GOOG\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": null,\n        \"max\": null,\n        \"num_unique_values\": 0,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"HP\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": null,\n        \"max\": null,\n        \"num_unique_values\": 0,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NVDA\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": null,\n        \"max\": null,\n        \"num_unique_values\": 0,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":34}]},{"cell_type":"code","source":["fig3, ax3 = plt.subplots()\n","norm.plot(ax=ax3);"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":433},"id":"R3GpvB5JKo5T","executionInfo":{"status":"ok","timestamp":1711709236978,"user_tz":-180,"elapsed":1067,"user":{"displayName":"Kosam Omollo","userId":"10545480591997447540"}},"outputId":"e0e7cc8b-3753-489d-a2ed-7ceb381f8df2"},"execution_count":35,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["upload_files(\"ticker-fb-w.csv\")\n","upload_files(\"ticker-fb-m.csv\")\n","fb_d = pd.read_csv(\"ticker-fb.csv\", index_col=0, parse_dates=True)\n","fb_w = pd.read_csv(\"ticker-fb-w.csv\", index_col=0, parse_dates=True)\n","fb_m = pd.read_csv(\"ticker-fb-m.csv\", index_col=0, parse_dates=True)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":164},"id":"-78Z03tWKusv","executionInfo":{"status":"ok","timestamp":1711709259697,"user_tz":-180,"elapsed":22732,"user":{"displayName":"Kosam Omollo","userId":"10545480591997447540"}},"outputId":"ca98b441-f65d-4a03-b82d-74492166e2d2"},"execution_count":36,"outputs":[{"output_type":"stream","name":"stdout","text":["uploading....ticker-fb-w.csv....\n"]},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-8a1447de-9413-45b2-b215-19a96120eb4d\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-8a1447de-9413-45b2-b215-19a96120eb4d\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving ticker-fb-w.csv to ticker-fb-w.csv\n","uploading....ticker-fb-m.csv....\n"]},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-2ace7916-f2fb-4773-ab35-a222dccf4222\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-2ace7916-f2fb-4773-ab35-a222dccf4222\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving ticker-fb-m.csv to ticker-fb-m.csv\n"]}]},{"cell_type":"code","source":["fb_d.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":238},"id":"N-Dh2POpPeRQ","executionInfo":{"status":"ok","timestamp":1711709259698,"user_tz":-180,"elapsed":46,"user":{"displayName":"Kosam Omollo","userId":"10545480591997447540"}},"outputId":"9f8b837a-5651-4756-e809-c0718dc7e505"},"execution_count":37,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                  High         Low        Open       Close    Volume  \\\n","Date                                                                   \n","2018-01-02  181.580002  177.550003  177.679993  181.419998  18151900   \n","2018-01-03  184.779999  181.330002  181.880005  184.669998  16886600   \n","2018-01-04  186.210007  184.100006  184.899994  184.330002  13880900   \n","2018-01-05  186.899994  184.929993  185.589996  186.850006  13574500   \n","2018-01-08  188.899994  186.330002  187.199997  188.279999  17994700   \n","\n","             Adj Close  \n","Date                    \n","2018-01-02  181.419998  \n","2018-01-03  184.669998  \n","2018-01-04  184.330002  \n","2018-01-05  186.850006  \n","2018-01-08  188.279999  "],"text/html":["\n","  <div id=\"df-fb89977f-a6ca-4121-b29c-d1a56c25cf8e\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>High</th>\n","      <th>Low</th>\n","      <th>Open</th>\n","      <th>Close</th>\n","      <th>Volume</th>\n","      <th>Adj Close</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2018-01-02</th>\n","      <td>181.580002</td>\n","      <td>177.550003</td>\n","      <td>177.679993</td>\n","      <td>181.419998</td>\n","      <td>18151900</td>\n","      <td>181.419998</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-03</th>\n","      <td>184.779999</td>\n","      <td>181.330002</td>\n","      <td>181.880005</td>\n","      <td>184.669998</td>\n","      <td>16886600</td>\n","      <td>184.669998</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-04</th>\n","      <td>186.210007</td>\n","      <td>184.100006</td>\n","      <td>184.899994</td>\n","      <td>184.330002</td>\n","      <td>13880900</td>\n","      <td>184.330002</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-05</th>\n","      <td>186.899994</td>\n","      <td>184.929993</td>\n","      <td>185.589996</td>\n","      <td>186.850006</td>\n","      <td>13574500</td>\n","      <td>186.850006</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-08</th>\n","      <td>188.899994</td>\n","      <td>186.330002</td>\n","      <td>187.199997</td>\n","      <td>188.279999</td>\n","      <td>17994700</td>\n","      <td>188.279999</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fb89977f-a6ca-4121-b29c-d1a56c25cf8e')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-fb89977f-a6ca-4121-b29c-d1a56c25cf8e button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-fb89977f-a6ca-4121-b29c-d1a56c25cf8e');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-e73a291e-4b81-4663-ba60-63d00083a6d1\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e73a291e-4b81-4663-ba60-63d00083a6d1')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-e73a291e-4b81-4663-ba60-63d00083a6d1 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"fb_d","summary":"{\n  \"name\": \"fb_d\",\n  \"rows\": 756,\n  \"fields\": [\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2018-01-02 00:00:00\",\n        \"max\": \"2020-12-31 00:00:00\",\n        \"num_unique_values\": 756,\n        \"samples\": [\n          \"2019-08-16 00:00:00\",\n          \"2018-05-22 00:00:00\",\n          \"2019-09-10 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"High\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 38.96082858834079,\n        \"min\": 129.74000549316406,\n        \"max\": 304.6700134277344,\n        \"num_unique_values\": 717,\n        \"samples\": [\n          199.1000061035156,\n          183.4900054931641,\n          182.8800048828125\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Low\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 37.950350992599425,\n        \"min\": 123.0199966430664,\n        \"max\": 293.04998779296875,\n        \"num_unique_values\": 727,\n        \"samples\": [\n          212.6499938964844,\n          264.0,\n          200.9600067138672\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Open\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 38.484810689493955,\n        \"min\": 123.0999984741211,\n        \"max\": 300.1600036621094,\n        \"num_unique_values\": 720,\n        \"samples\": [\n          183.0800018310547,\n          172.89999389648438,\n          164.8000030517578\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Close\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 38.47702663484276,\n        \"min\": 124.05999755859376,\n        \"max\": 303.9100036621094,\n        \"num_unique_values\": 732,\n        \"samples\": [\n          220.63999938964844,\n          176.00999450683594,\n          165.44000244140625\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Volume\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14282024,\n        \"min\": 6046300,\n        \"max\": 169803700,\n        \"num_unique_values\": 755,\n        \"samples\": [\n          11097800,\n          13109200,\n          18783000\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Adj Close\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 38.47702663484276,\n        \"min\": 124.05999755859376,\n        \"max\": 303.9100036621094,\n        \"num_unique_values\": 732,\n        \"samples\": [\n          220.63999938964844,\n          176.00999450683594,\n          165.44000244140625\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":37}]},{"cell_type":"code","source":["fb_w.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":238},"id":"vOdhqdBcPwfC","executionInfo":{"status":"ok","timestamp":1711709259698,"user_tz":-180,"elapsed":39,"user":{"displayName":"Kosam Omollo","userId":"10545480591997447540"}},"outputId":"a4179c96-83f4-4352-e285-c04d6f87f5f5"},"execution_count":38,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                  High         Low        Open       Close     Volume  \\\n","Date                                                                    \n","2018-01-01  186.899994  177.550003  177.679993  186.850006   62493900   \n","2018-01-08  188.899994  177.399994  187.199997  179.369995  128057600   \n","2018-01-15  182.369995  175.800003  181.500000  181.289993  114307600   \n","2018-01-22  190.660004  180.410004  180.800003  190.000000  106209700   \n","2018-01-29  195.320007  181.839996  188.750000  190.279999  165475700   \n","\n","             Adj Close  \n","Date                    \n","2018-01-01  186.850006  \n","2018-01-08  179.369995  \n","2018-01-15  181.289993  \n","2018-01-22  190.000000  \n","2018-01-29  190.279999  "],"text/html":["\n","  <div id=\"df-47a7180e-7dfb-4685-8f93-d5516e5fe589\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>High</th>\n","      <th>Low</th>\n","      <th>Open</th>\n","      <th>Close</th>\n","      <th>Volume</th>\n","      <th>Adj Close</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2018-01-01</th>\n","      <td>186.899994</td>\n","      <td>177.550003</td>\n","      <td>177.679993</td>\n","      <td>186.850006</td>\n","      <td>62493900</td>\n","      <td>186.850006</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-08</th>\n","      <td>188.899994</td>\n","      <td>177.399994</td>\n","      <td>187.199997</td>\n","      <td>179.369995</td>\n","      <td>128057600</td>\n","      <td>179.369995</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-15</th>\n","      <td>182.369995</td>\n","      <td>175.800003</td>\n","      <td>181.500000</td>\n","      <td>181.289993</td>\n","      <td>114307600</td>\n","      <td>181.289993</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-22</th>\n","      <td>190.660004</td>\n","      <td>180.410004</td>\n","      <td>180.800003</td>\n","      <td>190.000000</td>\n","      <td>106209700</td>\n","      <td>190.000000</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-29</th>\n","      <td>195.320007</td>\n","      <td>181.839996</td>\n","      <td>188.750000</td>\n","      <td>190.279999</td>\n","      <td>165475700</td>\n","      <td>190.279999</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-47a7180e-7dfb-4685-8f93-d5516e5fe589')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-47a7180e-7dfb-4685-8f93-d5516e5fe589 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-47a7180e-7dfb-4685-8f93-d5516e5fe589');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-46560806-7c6b-47cb-bc8e-c5c5ef729ec0\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-46560806-7c6b-47cb-bc8e-c5c5ef729ec0')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-46560806-7c6b-47cb-bc8e-c5c5ef729ec0 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"fb_w","summary":"{\n  \"name\": \"fb_w\",\n  \"rows\": 157,\n  \"fields\": [\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2018-01-01 00:00:00\",\n        \"max\": \"2020-12-28 00:00:00\",\n        \"num_unique_values\": 157,\n        \"samples\": [\n          \"2020-06-01 00:00:00\",\n          \"2018-11-12 00:00:00\",\n          \"2020-07-20 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"High\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 40.15307638418114,\n        \"min\": 135.9199981689453,\n        \"max\": 304.6700134277344,\n        \"num_unique_values\": 156,\n        \"samples\": [\n          197.3699951171875,\n          197.38999938964844,\n          199.6300048828125\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Low\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 37.06611778674129,\n        \"min\": 123.0199966430664,\n        \"max\": 271.1400146484375,\n        \"num_unique_values\": 156,\n        \"samples\": [\n          189.47000122070312,\n          189.75,\n          188.07000732421875\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Open\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 38.237555803098616,\n        \"min\": 123.0999984741211,\n        \"max\": 293.95001220703125,\n        \"num_unique_values\": 154,\n        \"samples\": [\n          165.72000122070312,\n          194.5500030517578,\n          272.9800109863281\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Close\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 38.71328302515464,\n        \"min\": 124.9499969482422,\n        \"max\": 293.6600036621094,\n        \"num_unique_values\": 157,\n        \"samples\": [\n          230.7700042724609,\n          139.52999877929688,\n          230.7100067138672\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Volume\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 54227361,\n        \"min\": 39030100,\n        \"max\": 451943400,\n        \"num_unique_values\": 157,\n        \"samples\": [\n          88315000,\n          123323100,\n          95761900\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Adj Close\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 38.71328302515464,\n        \"min\": 124.9499969482422,\n        \"max\": 293.6600036621094,\n        \"num_unique_values\": 157,\n        \"samples\": [\n          230.7700042724609,\n          139.52999877929688,\n          230.7100067138672\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":38}]},{"cell_type":"code","source":["fb_m.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":238},"id":"prQzoLOjQEVX","executionInfo":{"status":"ok","timestamp":1711709259699,"user_tz":-180,"elapsed":36,"user":{"displayName":"Kosam Omollo","userId":"10545480591997447540"}},"outputId":"78c16594-d9aa-4cf4-e5a2-eb9aed0c92b6"},"execution_count":39,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                  High         Low        Open       Close     Volume  \\\n","Date                                                                    \n","2018-01-01  190.660004  175.800003  177.679993  186.889999  495655700   \n","2018-02-01  195.320007  167.179993  188.220001  178.320007  516251600   \n","2018-03-01  186.100006  149.020004  179.009995  159.789993  996201700   \n","2018-04-01  177.100006  150.509995  157.809998  172.000000  750072700   \n","2018-05-01  192.720001  170.229996  172.000000  191.779999  401144100   \n","\n","             Adj Close  \n","Date                    \n","2018-01-01  186.889999  \n","2018-02-01  178.320007  \n","2018-03-01  159.789993  \n","2018-04-01  172.000000  \n","2018-05-01  191.779999  "],"text/html":["\n","  <div id=\"df-d537f428-4ba4-40c5-8a2a-51042e36427b\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>High</th>\n","      <th>Low</th>\n","      <th>Open</th>\n","      <th>Close</th>\n","      <th>Volume</th>\n","      <th>Adj Close</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2018-01-01</th>\n","      <td>190.660004</td>\n","      <td>175.800003</td>\n","      <td>177.679993</td>\n","      <td>186.889999</td>\n","      <td>495655700</td>\n","      <td>186.889999</td>\n","    </tr>\n","    <tr>\n","      <th>2018-02-01</th>\n","      <td>195.320007</td>\n","      <td>167.179993</td>\n","      <td>188.220001</td>\n","      <td>178.320007</td>\n","      <td>516251600</td>\n","      <td>178.320007</td>\n","    </tr>\n","    <tr>\n","      <th>2018-03-01</th>\n","      <td>186.100006</td>\n","      <td>149.020004</td>\n","      <td>179.009995</td>\n","      <td>159.789993</td>\n","      <td>996201700</td>\n","      <td>159.789993</td>\n","    </tr>\n","    <tr>\n","      <th>2018-04-01</th>\n","      <td>177.100006</td>\n","      <td>150.509995</td>\n","      <td>157.809998</td>\n","      <td>172.000000</td>\n","      <td>750072700</td>\n","      <td>172.000000</td>\n","    </tr>\n","    <tr>\n","      <th>2018-05-01</th>\n","      <td>192.720001</td>\n","      <td>170.229996</td>\n","      <td>172.000000</td>\n","      <td>191.779999</td>\n","      <td>401144100</td>\n","      <td>191.779999</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d537f428-4ba4-40c5-8a2a-51042e36427b')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-d537f428-4ba4-40c5-8a2a-51042e36427b button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-d537f428-4ba4-40c5-8a2a-51042e36427b');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-469d63a2-03c9-49b6-a5a3-a9d75a9a0309\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-469d63a2-03c9-49b6-a5a3-a9d75a9a0309')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-469d63a2-03c9-49b6-a5a3-a9d75a9a0309 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"fb_m","summary":"{\n  \"name\": \"fb_m\",\n  \"rows\": 36,\n  \"fields\": [\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2018-01-01 00:00:00\",\n        \"max\": \"2020-12-01 00:00:00\",\n        \"num_unique_values\": 36,\n        \"samples\": [\n          \"2020-12-01 00:00:00\",\n          \"2019-02-01 00:00:00\",\n          \"2020-03-01 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"High\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 41.76941679625184,\n        \"min\": 147.19000244140625,\n        \"max\": 304.6700134277344,\n        \"num_unique_values\": 36,\n        \"samples\": [\n          291.7799987792969,\n          172.47000122070312,\n          197.2400054931641\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Low\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 37.386188674815465,\n        \"min\": 123.0199966430664,\n        \"max\": 264.6300048828125,\n        \"num_unique_values\": 36,\n        \"samples\": [\n          264.6300048828125,\n          159.58999633789062,\n          137.10000610351562\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Open\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 37.925448581134006,\n        \"min\": 128.99000549316406,\n        \"max\": 294.7099914550781,\n        \"num_unique_values\": 36,\n        \"samples\": [\n          279.1600036621094,\n          165.83999633789062,\n          194.02999877929688\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Close\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 39.36622425616797,\n        \"min\": 131.08999633789062,\n        \"max\": 293.20001220703125,\n        \"num_unique_values\": 35,\n        \"samples\": [\n          204.7100067138672,\n          161.4499969482422,\n          192.47000122070312\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Volume\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 154311248,\n        \"min\": 258303900,\n        \"max\": 996201700,\n        \"num_unique_values\": 36,\n        \"samples\": [\n          363932500,\n          302243200,\n          649467700\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Adj Close\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 39.36622425616797,\n        \"min\": 131.08999633789062,\n        \"max\": 293.20001220703125,\n        \"num_unique_values\": 35,\n        \"samples\": [\n          204.7100067138672,\n          161.4499969482422,\n          192.47000122070312\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":39}]},{"cell_type":"code","source":["fig, ax = plt.subplots()\n","fb_d['Close'].plot(ax=ax);"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":433},"id":"n2VbWKlAQGhp","executionInfo":{"status":"ok","timestamp":1711709261359,"user_tz":-180,"elapsed":1693,"user":{"displayName":"Kosam Omollo","userId":"10545480591997447540"}},"outputId":"0b9b806e-cc6b-406c-a5f6-19ef39c82b17"},"execution_count":40,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"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xpj43Lp+/Trr3r07Gzt2rKt2t14eH6BYewPm0qKmUeGIESNYv3793Kp47pdffmEdO3Zkubm5jDHGampq2KxZs1hycjL7888/GWP6Yi1TOTk5TCaTsXXr1jXp/talvtdj3759LCoqirVt25YFBQWxtm3bstzcXHb8+HEml8v5zISrecN5xZj3nFvecl4xxti7777LMjMz+Q/ogoIClp6ezh544AF+P7n7ampq2CeffMIUCgU7efIkY0w/xFhSUuKanReo6zi4QLGsrMzscStXrmQxMTH8UJarWTuO+++/nw+uduzYwZYsWcI2bNjAP27JkiWsW7dublWvtXz5ctalSxdWWlrKGGOsoqKCjRkzhvXr14//siEMDNevX88kEgn/5WrTpk38a+cOPD5AqesN+K+//mKMiV+QEydOMF9fX/b111+z2tpatn79ej7id5UvvviCJSYmitKjZ86cYaNHj2aZmZlWH/fOO++wPn36sIqKiqbYzQap6/XYtWsXY4yx8+fPs02bNrFt27bxj8vOzmbR0dHs8OHDLtlvU95wXjHmPeeWt5xXarWaPfHEE+yee+4RBbk//PAD6927N5s7dy5/G3f/pUuX2IgRI1iXLl1Y3759WWBgIDtz5kyT77uQLcdhaubMmWzMmDFNsZv1qus4evXqxddomNJoNOyRRx5xu+HDefPmsR49eojem3bu3MkGDx7MHn74Yf427lirqqrYQw89xJKSklivXr1YQEAA27dvX5PvtzVuPgm6fsXFxaioqEBsbCwAQC6XY/r06UhNTcULL7wAAPDx8eG379SpE2bMmIHnn38ePXr0wP3334+qqiqX7DuntrYWsbGxOHr0KH9b+/bt8fjjj+PatWv44Ycf+NuPHj2KM2fOICsrC4sXL8aECRMQFBTkNv0e6no9XnrpJQBAmzZtMHToUAwaNIh/3A8//ICuXbsiIyPDJfttyhvOK8B7zi1vOa98fHygUqlQXV0NnU7HN2G7//770a1bN+zbtw9HjhwBYOzhotFoUFJSgqNHj6JDhw4oLCxE+/btXXYMgG3HAQC5ubnIycnBjBkz8PPPP2PSpEkAXN+npq7j6N69O/bv3y86jvPnz+PixYvIysrC7t27MXHiRACuPw5OTU0NfHx8UFxczN82YMAAjBgxAqdPn+YbMXL7e+3aNdy8eRNXrlxBWloaioqK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iPXr14899dRTFrdbuXIlS0tLY4wZ35wvX77MfH19RW/MrubprwfHGz7Y6zq3uDej3Nxc9tVXX7GsrCz2888/8/ePHTuWzZgxo8n32RpveD3UajX74IMPWMeOHdkXX3zBVCoV++uvv9ikSZPYiBEj+Blt06ZNYz179mTbt28XPX78+PHssccec8Gei9Fx6LnLcTBW/7FwExEYE/c54aYLV1RUMK1Wy7emd5dg3pGavJPsd999hwULFmDAgAFISUnBokWLAIi7ciYlJaGkpAQymQwTJ06ETqcDAGRmZkKtVuPYsWNNvdsAwHcZbNOmDQYPHox///vfGDNmDHbs2IEdO3aItgH03fqkUimKioogler/q3/77Td07drVbbr1efLrIWTtOPz8/MAYQ8eOHfHhhx/i/fffR1RUFL799lvs27cPCQkJqKmpQVJSkkv335ZzKzExEY8//jg++eQT3HPPPQCAwsJCXL16Fa1bt3bJ/pvy9NeDU1lZievXr2Py5Ml4/PHH4efnhz59+iAlJQVKpRK1tbUAgDfffBNqtRqff/45rl27xj++uroa4eHhrtp9Hh2HnrscB1D/sWg0Gn5bqVQKxhg6dOiAe++9FwcPHsRbb72FHj16YMKECdBqtZDJZC48GidpqkiIi+727t3LXnnlFXblyhX29ttvs/bt2/NRrjAC/O6771h6erqowGfJkiWsV69eZg1onO3cuXNmqTQuw3DixAk2ZswYdvfdd/P3cdHu5s2b2R133MFSU1PZZ599xh5//HEWERHB3n///Sbbd2s8+fUQashx1LVqakFBAevWrZvLXhNbzy3TbXNyclheXh6bMGECy8jI4JdOdxVPfz0YM39Njhw5wh8X97f93XffsS5duoiGEFavXs369+/PWrZsyd599102ceJEFhMTwy/K2NToONzrOBiz/1iE9x84cID5+vryXatNt/MmTg9QPPnD/fvvv2dJSUmsffv2rGfPnuzLL7/k7xMe01dffcVSUlLYV199xRgTvwH/9ddfbPTo0WzYsGHsnnvucfkiX578egh5+ge7veeWsI6jqqqKvfbaaywiIoL179/fpSv2evrrwZj5a/LFF1+I7hf+3z/yyCP8UIHwAyIvL49NmzaNjR07lt19990u+Xun43Cv42DM/mMxDea5mW5Dhw5lFy9edP6Ou5jTAhRP/3D/448/WFJSEluyZAnbuHEjmzNnDvP19WWff/45P87J7WteXh6bMmUK69GjB790ven4IdfRz1U8/fXgeMMHe2PPLWFRcnZ2Nr9Uuit4w+vBWN2vSXV1NWNMfzw6nY5VV1ezzp0782v8WMI9pqnRcVjmquNgzLHHcvToUX7dqduBUwIUT/5w595U33zzTdatWzfRh8EzzzzDunfvbrHl8IYNG1j37t3ZP/7xD3b06FE2atQofml4V/Pk10PI0z/Yve3c8vTXgzH7XpNr166xpKQkdu7cOcaYPns0e/bspttpC+g43Os4GPOuY3EVhwYo3vQG/OCDD7IHHniAMWZ8Iy0pKWH9+vVjkydP5huXceOHlZWV7JlnnmESiYT5+PiwYcOGiT7YXcFbXg9vOQ6Op59b3vZ6MNbw14QxxlasWMH69+/PysvL2bPPPst8fHzYuHHjWG1trcunfdJxuNdxMOZdx9LUnJJB8aQ34D/++IPNnDmTvf/++6K2xp9//jlTKBT8PnLH8fnnn7N27dqxHTt28NtWVFSw999/n8lkMjZw4EC3WoabMc96Periacfh7eeWp70ejNn/mnAFvjqdjt1///0sPDycRUZGsk6dOrlkdVs6Dvc6Dsa861jcRaMCFE9+A87Pz2ejRo1iMTExbMKECSwtLY2Fhobyx3H27FnWrFkz9vrrrzPGxIVXcXFxouLQkydPsl69eol6hLiCJ78eQp5+HN52bnn668GY416TyspKNmrUKNa8eXO2atWqJj0GOg73Ow7GvOtY3I1dAYqnvwFXVlayyZMnswcffFC05kLPnj356mmlUsn++c9/soCAAD4NzaXY7rjjDvbkk0822f7Wx9NfD443HIc3nVve8How5vjX5ODBg02490Z0HO51HIx517G4I5sDFG95A542bRr7/fffGWPGQr558+axXr168ft66dIl1rdvX9a7d29+efcrV66wjh07sg0bNrhmx014y+vhLcfBmHecW970ejDmHa8JY3Qc7nYcjHnXsbgbuzIo3vCCCAv7uCmPjzzyCJs6dapou7y8PNamTRuWlJTE7rvvPpaQkMDuvPNOt1oh0hteD8a85zi85dzylteDMe95Teg43Os4GPOuY3E3EsYYs7X7rFqthq+vLwBAp9NBKpViwoQJCAoKwueff85vd+3aNQwcOBAajQbdu3fH33//jQ4dOmDl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\n"},"metadata":{}}]},{"cell_type":"code","source":["fig2, ax2 = plt.subplots()\n","fb_w['Close'].plot(ax=ax2);"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":467},"id":"dp6qIH6lQM9z","executionInfo":{"status":"ok","timestamp":1711709261361,"user_tz":-180,"elapsed":28,"user":{"displayName":"Kosam Omollo","userId":"10545480591997447540"}},"outputId":"883f106d-203f-4e2f-c90c-782169b99710"},"execution_count":41,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"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\n"},"metadata":{}}]},{"cell_type":"code","source":["fig3, ax3 = plt.subplots()\n","fb_m['Close'].plot(ax=ax3);"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":468},"id":"Ee-qHTEXQan9","executionInfo":{"status":"ok","timestamp":1711709262489,"user_tz":-180,"elapsed":1148,"user":{"displayName":"Kosam Omollo","userId":"10545480591997447540"}},"outputId":"382e309f-7d31-4258-f260-3a3a9228ea9f"},"execution_count":42,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":[],"metadata":{"id":"PV8xXB8uQkbw","executionInfo":{"status":"ok","timestamp":1711709262489,"user_tz":-180,"elapsed":43,"user":{"displayName":"Kosam Omollo","userId":"10545480591997447540"}}},"execution_count":42,"outputs":[]}]}